git control system

installation:
    git config --global user.name
    git config --global user.email
    
    check:
        git config user.name
        git config user.email

initialisation:
    first go to the directory with the command line.
    git init 
    
commit
    create a file or modify the file.
    git add filename.extention      (used to add the changes or modification in the branch)
    git commit -m "comment"         (used to do the final commit with the comment)
    
    
    it has got other way to add all files to the branch.
    git add .
    
    it has got other way to add all the files which have the same extention
    git add *.extention
    
    
git log:

    git log
    this command will show all the commits you have done up till now.
    
    git show
    this command will show all the commits with the detailed information in it
    
    they both are the logger for the git.
    
express commit:
    git commit -am "comment"
    this command is used to skip the git add command.
    warning  : this command does not include the files which are newly created.
    
    git ls-files            (used to see the files that have changes)
    

go back or rollback changes using checkout:
    git reset HEAD          (this command is used to undo the changes in the staging area. But it will not effect or go back the file.
    git checkout -- filename.extention          (this will undo the changes we made recently in the file that is stored in out local machine.)
    
    
sorting:
    this command is used to access the git log file in some neat way.
    
    git log --oneline --graph --decorate --all
    
    
alias:
    this command is used to create shortcuts for the git commands.
    git config --global alias.shortcut_name "command to be shortcuts"
    to run the shortcuts:
        git alias_name
        
**to edit a git config file we can use the following command.**
**git config --global --edit**

rename and delete files:
    rename:
        git mv file_name.extention new_file_name.extention
    delete:
        git rm file_name.extention


ignoring files:
    this option is preety useful as it hides or ignores the files which we do not want to send to git server.
    first create a file named ".gitignore"
    then add the file names of the files which we don't want to add to the server.
                                    OR
    in the gitignore file just add the extension of the files which we don't want to include for eg: "*.log"
    
    
branches:
    create a new branch:
        git checkout -b branchname
    switching branches:
        git checkout branchname
    merging the branch:
        git merge branchname

        
conflicts:
    this issues are created when there is a same file and in the same line two branches make some changes and they are different from one other. This conflict can be caused during merging the branches and it can be solved by deleting the line in the merged branch.
    
    
deleting a branch:
    git branch -d branch_name
    this command deletes the branch we specify.
    
    
tags:
    create:
        git tag tagname
    create a tag with message:
        git tag -a tagname -m "message or comment"
    list all tags:
        git tag --list
    delete a tag:
        git tag -d tagname              (This command deletes the tag you specify)
            OR
        git tag -d                      (This command deletes all the tags present in the git)
        
        
stash:
    GIT stash is a useful command which is used when we are working on a project and we want to share the project without the updates or the last fine working code of the project.
    It's command is as follows:-
        git stash           (for invoking the stash )
        git stash list      (for viewing if stash is availiable for the current project.)
        git stash pop       (for undoing the stash command)
        
        
reset:
    To go back to the previous commit we can use two different types of commands.
    soft:
        this command reset to the specified commit but it is only logical meand no changes will occour.
        git reset commit_id --soft
    hard:
        This command reset to the specified commit and it changes the files according to that commit and the files are changed.
        git reset commit_id --hard
        
        
link to github:
    first open your github account or login into an existing github account.
    after that create a new repository and in that new repository fill the form and then you will see the instructions for connecting the repository to your git project file.
    then for pushing the local git database to the github account use the following command.
        git push origin branch_name
    
    
to check if our project is connected to some remote repository we can use the following command.
    git remote -v

    

clone a git project to your local machine:
    copy the url that the github provides you to copy for cloning the project.
    then simply perform this code:
        git clone url_of_the_project
                    or
        git clone url_of_the_project new_project_name           (if you want to have the git project in your file system with other name)

        
create a shortcut for the git push option:
    git config --global push.default simple
    
    
editing the title:
    if you changed the title of your project or the URL of your project has been modified then use the following command.
        git remote set-url origin new_URL
    
    
update the data from the github:
    if we created a new file on the github server through webpage then that file dosen't automatically sync with your machine.
    So in order to sync that file or data we can use the following command:
        git pull
        
to check the details of the commit:
    git show commit_id
    
    
to pull data from the specified branch we can use the following command:
    git pull origin branch_name
    
    
